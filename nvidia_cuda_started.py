# -*- coding: utf-8 -*-
"""nvidia tutorial cuda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m52SdFmfglke_MM7f9uXBKc3uLAd_BV1
"""

!nvidia-smi

import numpy as np
from numba import cuda

@cuda.jit
def multiply_by_2(array):
    pos = cuda.grid(1)
    array[pos] = array[pos] * 2

an_array = np.arange(1000)

threadsperblock = 32
blockspergrid = (an_array.size + (threadsperblock - 1)) // threadsperblock
multiply_by_2[blockspergrid, threadsperblock](an_array)

print(an_array)

import numba
import numpy as np

from timeit import default_timer as timer   

def normal_function(array):
    k = array
    for i in range(10000000):
        array[i]+= 1
        for j in range(2):
            k[j] += j * 3

  
@numba.jit                    
def using_gpu(array):
    k = array
    for i in range(10000000):
        array[i]+= 1
        for j in range(2):
            k[j] += j * 3


if __name__=="__main__":
    n = 10000000                            

    start = timer()
    normal_function(np.ones(n, dtype = np.float64))
    print("Only CPU:", timer()-start)    
      
    start = timer(np.ones(n, dtype = np.float64))
    using_gpu(a)
    print("Using GPU:", timer()-start)